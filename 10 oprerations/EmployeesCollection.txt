// Switch to the 'adms' database 
use adms

// Create a collection named 'EmployeesCollection'
db.createCollection("EmployeesCollection");

// Insert multiple employee documents into the 'EmployeesCollection'
db.EmployeesCollection.insertMany([
    { empId: 1, name: "John Doe", age: 29, department: "HR", salary: 50000, joiningDate: new Date("2021-03-15") },
    { empId: 2, name: "Jane Smith", age: 34, department: "Finance", salary: 75000, joiningDate: new Date("2019-06-01") },
    { empId: 3, name: "Samuel Green", age: 28, department: "IT", salary: 60000, joiningDate: new Date("2022-01-20") },
    { empId: 4, name: "Emily White", age: 41, department: "Operations", salary: 90000, joiningDate: new Date("2018-09-10") },
    { empId: 5, name: "Michael Brown", age: 26, department: "IT", salary: 55000, joiningDate: new Date("2023-02-05") },
    { empId: 6, name: "Sarah Davis", age: 38, department: "HR", salary: 65000, joiningDate: new Date("2020-11-12") },
    { empId: 7, name: "David Wilson", age: 45, department: "Finance", salary: 80000, joiningDate: new Date("2017-04-18") },
    { empId: 8, name: "Emma Clark", age: 32, department: "Operations", salary: 70000, joiningDate: new Date("2021-07-25") }
]);

// 1. Find all employees in the 'EmployeesCollection'
db.EmployeesCollection.find()

// 2. Update the salary of an employee with 'empId' 3 to 62000
db.EmployeesCollection.updateOne(
    { empId: 3 },
    { $set: { salary: 62000 } }
)

// 3. Delete an employee where the 'age' is greater than 40
db.EmployeesCollection.deleteOne({ age: { $gt: 40 } })

// 4. Count the number of employees in the 'IT' department
db.EmployeesCollection.find({ department: "IT" }).count()

// 5. Find all employees and sort them by 'salary' in descending order
db.EmployeesCollection.find().sort({ salary: -1 })

// 6. Find employees with a salary greater than 60000
db.EmployeesCollection.find({ salary: { $gt: 60000 } })

// 7. Limit the result to the first 3 employees
db.EmployeesCollection.find().limit(3)

// 8. Find employees working in specific departments ('HR' or 'Finance') using `$in`
db.EmployeesCollection.find({ department: { $in: ["HR", "Finance"] } })

// 9. Exclude employees from departments 'Operations' and 'IT' using `$nin`
db.EmployeesCollection.find({ department: { $nin: ["Operations", "IT"] } })

// 10. Use aggregation to group employees by 'department' and calculate the total salary in each department
db.EmployeesCollection.aggregate([
    { $group: { _id: "$department", totalSalary: { $sum: "$salary" } } }
]);

// Verify all data after updates and deletions
db.EmployeesCollection.find()
