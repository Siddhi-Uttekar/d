// Switch to the 'adms' database
use adms

// Create a collection named 'ProjectsCollection'
db.createCollection("ProjectsCollection");

// Insert multiple project documents into the 'ProjectsCollection'
db.ProjectsCollection.insertMany([
    { projectName: "AI Chatbot", category: "AI", duration: 6, status: "In Progress", teamSize: 4, budget: 10000 },
    { projectName: "E-commerce Website", category: "Web Development", duration: 12, status: "Completed", teamSize: 8, budget: 25000 },
    { projectName: "Mobile App Development", category: "Mobile", duration: 9, status: "In Progress", teamSize: 5, budget: 15000 },
    { projectName: "Cloud Storage Solution", category: "Cloud Computing", duration: 15, status: "Completed", teamSize: 10, budget: 35000 },
    { projectName: "Blockchain for Supply Chain", category: "Blockchain", duration: 8, status: "In Progress", teamSize: 6, budget: 20000 },
    { projectName: "Cybersecurity Awareness Campaign", category: "Cybersecurity", duration: 3, status: "Completed", teamSize: 3, budget: 5000 },
    { projectName: "Smart City IoT", category: "IoT", duration: 18, status: "In Progress", teamSize: 12, budget: 45000 },
    { projectName: "Data Science Research", category: "Data Science", duration: 24, status: "Completed", teamSize: 7, budget: 30000 }
]);

// 1. Find all projects in the collection
db.ProjectsCollection.find()

// 2. Update the status of "AI Chatbot" to "Completed"
db.ProjectsCollection.updateOne(
    { projectName: "AI Chatbot" },
    { $set: { status: "Completed" } }
)

// 3. Delete projects with a budget less than $10,000
db.ProjectsCollection.deleteMany({ budget: { $lt: 10000 } })

// 4. Count the number of "In Progress" projects
db.ProjectsCollection.find({ status: "In Progress" }).count()

// 5. Find all projects sorted by duration in descending order
db.ProjectsCollection.find().sort({ duration: -1 })

// 6. Find projects with a budget greater than $20,000
db.ProjectsCollection.find({ budget: { $gt: 20000 } })

// 7. Limit the result to 3 projects
db.ProjectsCollection.find().limit(3)

// 8. Use `$or` to find projects with either a duration greater than 12 months or team size greater than 8
db.ProjectsCollection.find({ $or: [{ duration: { $gt: 12 } }, { teamSize: { $gt: 8 } }] })

// 9. Find projects with team size between 4 and 8 members
db.ProjectsCollection.find({ teamSize: { $gte: 4, $lte: 8 } })

// 10. Use aggregation to calculate the average budget for each project category
db.ProjectsCollection.aggregate([
    { $group: { _id: "$category", avgBudget: { $avg: "$budget" } } }
]);

// Verify data after updates and deletions
db.ProjectsCollection.find()
